# This is a basic workflow to help you get started with Actions

name: Deploy to App Store / Google Play

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  repository_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-12

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/Podfile.lock') }}
          path: ./flutter
          restore-keys: ${{ runner.os }}-flutter-

      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          key: pods
          path: ./ios/Pods
          restore-keys: ${{ runner.os }}-pods-

      - name: Flutter Command Initialize
        run: |
          git clone https://github.com/flutter/flutter.git
          echo "$(pwd)/flutter/bin" >> $GITHUB_PATH

      - name: Flutter Channel Switch
        run: flutter channel beta

      - name: Flutter Pub Get
        run: flutter pub get

      - name: Import Apple Provisioning Profiles
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n ${{ secrets.PROVISIONING_PROFILE }} | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/Submon_distribution.mobileprovision
          echo -n ${{ secrets.PROVISIONING_PROFILE_WIDGETKIT }} | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/Submon_WidgetKit_Production.mobileprovision

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}

      - name: Import App Store Connect API Key
        run: |
          mkdir ~/private_key
          echo -n "${{ secrets.APP_STORE_PRIVKEY_P8 }}" > ~/private_key/AuthKey_${{ secrets.APP_STORE_PRIVKEY_ID }}.p8

      - name: Build IPA for App Store
        run: flutter build ipa --build-number $((${GITHUB_RUN_NUMBER}+42))
      #      - name: Build App Bundle for Google Play
      #        run: flutter build appbundle

      - name: Deploy to App Store
        run: xcrun altool --upload-app --type ios -f "./build/ios/ipa/Submon.ipa" --apiKey ${{ secrets.APP_STORE_PRIVKEY_ID }} --apiIssuer ${{ secrets.APP_STORE_CONNECT_API_ISSUER }}
