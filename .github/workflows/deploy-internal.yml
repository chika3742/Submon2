# This is a basic workflow to help you get started with Actions

name: Deploy to App Store / Google Play

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  repository_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Build-for-iOS:
    # The type of runner that the job will run on
    runs-on: macos-12

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-flutter
          path: ./flutter

      - name: Cache Pods
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          path: ./ios/Pods
          restore-keys: ${{ runner.os }}-pods-

      - name: Flutter Command Initialize
        run: |
          if [ ! -d "./flutter" ] ; then
            git clone https://github.com/flutter/flutter.git
            echo "$(pwd)/flutter/bin" >> $GITHUB_PATH
          fi

      - name: Flutter Channel Switch
        run: flutter channel beta

      - name: Flutter Pub Get
        run: flutter pub get

      - name: Import Apple Provisioning Profiles
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n ${{ secrets.PROVISIONING_PROFILE }} | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/35fb050a-3d4f-46b7-ac78-9b342258c5c8.mobileprovision
          echo -n ${{ secrets.PROVISIONING_PROFILE_WIDGETKIT }} | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/90e08659-d60f-4b2b-ba19-4c54bc05e6ca.mobileprovision

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}

      - name: Import App Store Connect API Key
        run: |
          mkdir ~/private_keys
          echo -n "${{ secrets.APP_STORE_PRIVKEY_P8 }}" > ~/private_keys/AuthKey_${{ secrets.APP_STORE_PRIVKEY_ID }}.p8

      - name: Import .env
        run: echo -n "${{ secrets.DOTENV }}" > .env

      - name: Build IPA for App Store
        run: flutter build ipa --build-number $((${GITHUB_RUN_NUMBER}+26))

      - name: Deploy to App Store
        run: xcrun altool --upload-app --type ios -f "./build/ios/ipa/Submon.ipa" --apiKey ${{ secrets.APP_STORE_PRIVKEY_ID }} --apiIssuer ${{ secrets.APP_STORE_CONNECT_API_ISSUER }}

  Build-for-Android:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-flutter
          path: ./flutter

      - name: Flutter Command Initialize
        run: |
          if [ ! -d "./flutter" ] ; then
            git clone https://github.com/flutter/flutter.git
            echo "$(pwd)/flutter/bin" >> $GITHUB_PATH
          fi

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
          bundler-cache: true

      - name: Install Fastlane
        run: |
          echo -n "source \"https://rubygems.org\"
          
          gem \"fastlane\"" > ./Gemfile
          bundle install
          bundle update

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yq

      - name: Flutter Pub Get
        run: flutter pub get

      - name: Inport Keystore
        run: |
          echo -n "${{ secrets.ANDROID_LOCAL_PROPERTIES }}" >> android/local.properties
          echo -n "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > ~/release.keystore
          cat android/local.properties

      - name: Import .env
        run: echo -n "${{ secrets.DOTENV }}" > .env

      - name: Import google-services.json
        run: |
          mkdir -p android/app/src/release
          echo -n "${{ secrets.ANDROID_GOOGLE_SERVICES_JSON_BASE64 }}" | base64 -d > android/app/src/release/google-services.json

      - name: Build App Bundle for Android
        run: |
          flutter build appbundle --build-name $(cat pubspec.yaml | yq -r '.version | split("+") | .[0]')-build$((${GITHUB_RUN_NUMBER}+26)) --build-number $((${GITHUB_RUN_NUMBER}+42))

      - name: Deploy to Google Play
        run: bundle exec fastlane supply --aab build/app/outputs/bundle/release/app-bundle.aab --track internal --json_key

      - name: Cancel if failed
        uses: andymckay/cancel-action@0.2
        if: failure()
